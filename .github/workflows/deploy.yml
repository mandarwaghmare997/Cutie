name: Deploy Qryti Platform to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit
        
    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml || echo "Tests completed with warnings"
        
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan
        path: bandit-report.json

  build-frontend:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Build frontend
      run: |
        # Create distribution directory
        mkdir -p dist
        
        # Copy static files
        cp -r src/static/* dist/
        
        # Install build tools
        npm install -g clean-css-cli uglify-js html-minifier
        
        # Optimize CSS files
        find dist -name "*.css" -exec cleancss -o {} {} \;
        
        # Optimize JavaScript files
        find dist -name "*.js" -exec uglifyjs {} -o {} \;
        
        # Optimize HTML files
        find dist -name "*.html" -exec html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js -o {} {} \;
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: dist/

  build-backend:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Package Lambda functions
      run: |
        mkdir -p lambda-packages
        
        # Install dependencies in a temporary directory
        pip install -r requirements.txt -t lambda-temp/
        
        # Copy source code
        cp -r src/* lambda-temp/
        
        # Create Lambda deployment package
        cd lambda-temp
        zip -r ../lambda-packages/qryti-api.zip .
        cd ..
        
        # Clean up
        rm -rf lambda-temp
        
    - name: Upload Lambda packages
      uses: actions/upload-artifact@v3
      with:
        name: lambda-packages
        path: lambda-packages/

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Lambda packages
      uses: actions/download-artifact@v3
      with:
        name: lambda-packages
        path: lambda-packages/
        
    - name: Upload Lambda package to S3
      run: |
        # Create S3 bucket for deployment artifacts if it doesn't exist
        BUCKET_NAME="qryti-deployment-artifacts-${{ github.repository_owner }}"
        aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }} || true
        
        # Upload Lambda package
        aws s3 cp lambda-packages/qryti-api.zip s3://$BUCKET_NAME/lambda/qryti-api.zip
        
        echo "LAMBDA_S3_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
        echo "LAMBDA_S3_KEY=lambda/qryti-api.zip" >> $GITHUB_ENV
        
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file deployment/aws/cloudformation-template.yaml \
          --stack-name qryti-platform-${{ github.ref_name }} \
          --parameter-overrides \
            Environment=${{ github.ref_name }} \
            AdminEmail=${{ secrets.ADMIN_EMAIL }} \
            JWTSecret=${{ secrets.JWT_SECRET }} \
            EncryptionKey=${{ secrets.ENCRYPTION_KEY }} \
            LambdaS3Bucket=${{ env.LAMBDA_S3_BUCKET }} \
            LambdaS3Key=${{ env.LAMBDA_S3_KEY }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: dist/
        
    - name: Deploy to S3 and invalidate CloudFront
      run: |
        STACK_NAME="qryti-platform-${{ github.ref_name }}"
        
        # Get S3 bucket name from CloudFormation outputs
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucket`].OutputValue' \
          --output text)
          
        # Upload files to S3
        aws s3 sync dist/ s3://$BUCKET_NAME --delete
        
        # Get CloudFront distribution ID
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistribution`].OutputValue' \
          --output text)
          
        # Invalidate CloudFront cache
        if [ "$DISTRIBUTION_ID" != "None" ] && [ "$DISTRIBUTION_ID" != "" ]; then
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
        fi

  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get deployment URLs
      run: |
        STACK_NAME="qryti-platform-${{ github.ref_name }}"
        
        # Get API Gateway URL
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text)
          
        # Get Frontend URL
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' \
          --output text)
          
        echo "API_URL=$API_URL" >> $GITHUB_ENV
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        
        echo "🚀 Deployment URLs:"
        echo "Frontend: $FRONTEND_URL"
        echo "API: $API_URL"
        
    - name: Run health checks
      run: |
        echo "🔍 Running health checks..."
        
        # Test frontend accessibility
        if curl -f -s "$FRONTEND_URL" > /dev/null; then
          echo "✅ Frontend is accessible"
        else
          echo "❌ Frontend health check failed"
          exit 1
        fi
        
        # Test API health endpoint (if available)
        if curl -f -s "$API_URL/health" > /dev/null; then
          echo "✅ API health check passed"
        else
          echo "⚠️ API health endpoint not available (this may be expected)"
        fi
        
    - name: Performance testing
      run: |
        echo "🚀 Running basic performance tests..."
        
        # Install curl for testing
        sudo apt-get update && sudo apt-get install -y curl
        
        # Test response time
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$FRONTEND_URL")
        echo "Frontend response time: ${RESPONSE_TIME}s"
        
        # Check if response time is acceptable (< 5 seconds)
        if (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
          echo "✅ Performance test passed"
        else
          echo "⚠️ Performance test warning: Response time > 5s"
        fi

  notify-success:
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: success()
    
    steps:
    - name: Deployment Success Notification
      run: |
        echo "🎉 Qryti Platform Deployment Successful!"
        echo "✅ All tests passed"
        echo "✅ Infrastructure deployed"
        echo "✅ Frontend deployed"
        echo "✅ Health checks passed"
        echo ""
        echo "🔗 Access your platform:"
        echo "Frontend: ${{ env.FRONTEND_URL }}"
        echo "API: ${{ env.API_URL }}"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [test, build-frontend, build-backend, deploy-infrastructure, deploy-frontend, post-deployment-tests]
    if: failure()
    
    steps:
    - name: Deployment Failure Notification
      run: |
        echo "❌ Qryti Platform Deployment Failed!"
        echo "Please check the workflow logs for details."
        echo "Common issues:"
        echo "- AWS credentials not configured"
        echo "- Missing required secrets"
        echo "- CloudFormation template errors"
        echo "- Resource limits exceeded"

